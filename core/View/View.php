<?php declare(strict_types=1);
namespace Core\View;
final class View { private array $data=[]; private ?string $layout=null; private array $layoutData=[]; private string $themesDir; public function __construct(private string $baseDir, string $themesDir){$this->themesDir=$themesDir;} public function with(array $d):self{$this->data=$d+$this->data;return $this;} public function layout(string $n,array $d=[]):self{$this->layout=$n;$this->layoutData=$d;return $this;} public function render(string $viewPath):void{ $content=$this->capture($this->base($viewPath),$this->data); if($this->layout){$layout=$this->themesDir.'/default/layouts/'.$this->layout.'.php'; $this->safeRequire($layout,['content'=>$content,'meta'=>$this->layoutData]);} else {echo $content;} } public function partial(string $name,array $data=[]):void{$this->safeRequire($this->themesDir.'/default/partials/'.$name.'.php',$data);} public function asset(string $p):string{return '/assets/'.ltrim($p,'/');} private function base(string $p):string{return str_contains($p,DIRECTORY_SEPARATOR)?$p:$this->baseDir.'/'.$p.'.php';} private function capture(string $f,array $v):string{ob_start();$this->safeRequire($f,$v);return (string)ob_get_clean();} private function safeRequire(string $f,array $v=[]):void{ if(!is_file($f)){http_response_code(500);exit('Missing: '.$f);} extract($v,EXTR_SKIP); /** @var self $this */ require $f; } }
